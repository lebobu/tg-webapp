// controllers/telegramController.js

function escMd(s = '') {
  return String(s).replace(/([_*[\]()~`>#+\-=|{}.!])/g, '\\$1');
}

module.exports = (bot) => ({

  // /start ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ò–ú–ï–ù–ù–û inline_keyboard —Å web_app (–¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ B)
  onStartCommand: (msg) => {
    const url = process.env.SERVER_URL; // –≤–∞—à –ø—É–±–ª–∏—á–Ω—ã–π https —Ö–æ—Å—Ç, –≥–¥–µ –æ—Ç–∫—Ä—ã—Ç WebApp
    bot.sendMessage(
      msg.chat.id,
      '–û—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ, –ø—Ä–æ–π–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ:',
      {
        reply_markup: {
          inline_keyboard: [[{
            text: '–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥',
            web_app: { url }     // –í–ê–ñ–ù–û: inline-–∫–Ω–æ–ø–∫–∞
          }]]
        }
      }
    );
  },

  // /id ‚Äî –±—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–± —É–∑–Ω–∞—Ç—å chat_id
  onIdCommand: (msg) => {
    bot.sendMessage(msg.chat.id, `–í–∞—à chat_id: ${msg.chat.id}`);
  },

  // Telegram webhook ‚Üí –ø—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º –∞–ø–¥–µ–π—Ç—ã –≤ node-telegram-bot-api
  onWebhook: (req, res) => {
    try {
      bot.processUpdate(req.body);
      res.sendStatus(200);
    } catch (e) {
      console.error('onWebhook error:', e);
      res.sendStatus(500);
    }
  },

  // –û—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –µ—Å–ª–∏ –∫–æ–≥–¥–∞-—Ç–æ –ø–æ—à–ª—ë—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ /data
  onWebAppData: async (req, res) => {
    try {
      const { user, initData, platform, form } = req.body || {};
      if (!user?.id) return res.status(400).json({ ok: false, error: 'no user.id' });

      const lines = [
        'üîî *WebApp (/data):*',
        `‚Ä¢ *Name:* ${escMd([user.first_name, user.last_name].filter(Boolean).join(' ') || 'N/A')}`,
        `‚Ä¢ *Username:* ${escMd(user.username ? '@' + user.username : 'N/A')}`,
        `‚Ä¢ *Platform:* ${escMd(platform || 'N/A')}`,
      ];
      if (form && typeof form === 'object') {
        lines.push('‚Ä¢ *Form:*', '`' + escMd(JSON.stringify(form)) + '`');
      } else {
        lines.push(`‚Ä¢ *initData:* \`${escMd(String(initData || '').slice(0, 1500))}\``);
      }

      await bot.sendMessage(user.id, lines.join('\n'), { parse_mode: 'Markdown' });
      res.json({ ok: true });
    } catch (e) {
      console.error('onWebAppData error:', e);
      res.status(500).json({ ok: false });
    }
  },

  // –ù–û–í–û–ï: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∞—Ä–∏–∞–Ω—Ç–∞ B ‚Äî –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ answerWebAppQuery –ø–æ query_id
  onWebAppAnswer: async (req, res) => {
    try {
      const { query_id, data } = req.body || {};
      if (!query_id) return res.status(400).json({ ok: false, error: 'no query_id' });

      // –æ–∂–∏–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É { plan, accounts, duration } –∏–∑ wizard.js
      const plan     = data?.plan ?? '-';
      const accounts = data?.accounts ?? '-';
      const duration = data?.duration ?? '-';

      const text = [
        '‚úÖ *–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞*',
        `‚Ä¢ *–¢–∞—Ä–∏—Ñ:* ${escMd(plan)}`,
        `‚Ä¢ *–ê–∫–∫–∞—É–Ω—Ç–æ–≤:* ${escMd(accounts)}`,
        `‚Ä¢ *–°—Ä–æ–∫:* ${escMd(duration)} –º–µ—Å.`,
      ].join('\n');

      // –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—è–≤–∏—Ç—Å—è –í –ß–ê–¢–ï, –≥–¥–µ –Ω–∞–∂–∞–ª–∏ inline-–∫–Ω–æ–ø–∫—É
      await bot.answerWebAppQuery(query_id, {
        type: 'article',
        id: String(Date.now()),
        title: '–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞',
        input_message_content: {
          message_text: text,
          parse_mode: 'Markdown'
        }
      });

      res.json({ ok: true });
    } catch (e) {
      console.error('answerWebAppQuery error:', e);
      res.status(500).json({ ok: false });
    }
  },

});
