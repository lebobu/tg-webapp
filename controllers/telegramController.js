// controllers/telegramController.js
const chatStore = require('../chatStore'); // –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ ‚Äî —É–¥–∞–ª–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –∏ –≤—ã–∑–æ–≤—ã chatStore.*
const { sendMail } = require('../mailer'); // <-- –Ω–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ e-mail

// —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
const ADMIN_IDS = (process.env.ADMIN_CHAT_IDS || process.env.ADMIN_CHAT_ID || '')
  .split(/[,\s]+/)
  .map(x => x.trim())
  .filter(Boolean);

// e-mail –∞–¥–º–∏–Ω–∞ –¥–ª—è –ø–∏—Å–µ–º
const ADMIN_EMAIL = (process.env.ADMIN_EMAIL || '').trim();

function escMd(s = '') {
  return String(s).replace(/([_*[\]()~`>#+\-=|{}.!])/g, '\\$1');
}
function escHtml(s = '') {
  return String(s)
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;');
}
function isValidEmail(s) {
  return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(String(s || '').trim());
}

// –ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –±–µ–∑ "–≠–∫–æ–Ω–æ–º–∏—è"
function buildPriceLines(pricing) {
  if (!pricing) return [];
  return [`‚Ä¢ *–ò—Ç–æ–≥–æ:* ${escMd(pricing.total)} —Ä—É–±.`];
}

async function notifyAdmins(bot, lines) {
  if (!ADMIN_IDS.length) return;
  const text = ['üõé *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞*', ...lines].join('\n');
  for (const adminId of ADMIN_IDS) {
    try {
      await bot.sendMessage(adminId, text, { parse_mode: 'Markdown' });
    } catch (e) {
      console.warn('notifyAdmins failed for', adminId, e.message);
    }
  }
}

const SPECIAL_PLANS = new Set(['–†–æ—É—Ç–µ—Ä','–°–µ—Ä–≤–µ—Ä VPS']);

// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∏—Å—å–º–∞ (–∞–¥–º–∏–Ω—É –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
function makeEmailContent({ plan, accounts, duration, email, subscribe, pricing, userId, chatId }) {
  const rows = [
    ['–¢–∞—Ä–∏—Ñ', plan],
    ...(SPECIAL_PLANS.has(plan) ? [] : [['–ê–∫–∫–∞—É–Ω—Ç–æ–≤', accounts]]),
    ['–°—Ä–æ–∫', duration ? `${duration} –º–µ—Å.` : '-'],
    ['Email', email || '-'],
    ['–ü–æ–¥–ø–∏—Å–∫–∞', subscribe ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–Ω–µ—Ç'],
    ...(pricing ? [['–ò—Ç–æ–≥–æ', `${pricing.total} —Ä—É–±.`]] : []),
  ];

  const subject = `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: ${plan}${duration ? `, ${duration} –º–µ—Å.` : ''}`;
  const text =
    `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞\n\n` +
    rows.map(([k, v]) => `${k}: ${v}`).join('\n') +
    (userId ? `\n\nUser ID: ${userId}` : '') +
    (chatId ? `\nChat ID: ${chatId}` : '');

  const html =
    `<h3>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</h3>` +
    `<table border="0" cellpadding="6" cellspacing="0" style="border-collapse:collapse;font:14px/1.4 system-ui,-apple-system,Segoe UI,Roboto,sans-serif">` +
    rows
      .map(
        ([k, v]) =>
          `<tr><td style="color:#6b7280">${escHtml(k)}</td><td><b>${escHtml(String(v))}</b></td></tr>`
      )
      .join('') +
    `</table>` +
    (userId || chatId
      ? `<p style="color:#6b7280">` +
        (userId ? `User ID: <code>${escHtml(String(userId))}</code><br>` : '') +
        (chatId ? `Chat ID: <code>${escHtml(String(chatId))}</code>` : '') +
        `</p>`
      : '');

  return { subject, text, html };
}

async function emailAdminsAndUser(payload) {
  try {
    const { plan, accounts, duration, email, subscribe, pricing, userId, chatId } = payload;
    const { subject, text, html } = makeEmailContent({
      plan, accounts, duration, email, subscribe, pricing, userId, chatId
    });

    // –∞–¥–º–∏–Ω—É
    if (ADMIN_EMAIL) {
      await sendMail({ to: ADMIN_EMAIL, subject, text, html });
    }

    // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –≤–∞–ª–∏–¥–µ–Ω e-mail)
    if (email && isValidEmail(email)) {
      await sendMail({ to: email, subject: '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞', text, html });
    }
  } catch (e) {
    console.warn('emailAdminsAndUser failed:', e.message);
  }
}

module.exports = (bot) => ({

  // /start ‚Äî inline-–∫–Ω–æ–ø–∫–∞ —Å web_app (–≤–∞—Ä–∏–∞–Ω—Ç B)
  onStartCommand: async (msg) => {
    const url = process.env.SERVER_URL;
    try { await chatStore.set(msg.from.id, msg.chat.id); } catch (_) {}
    bot.sendMessage(
      msg.chat.id,
      '–ü–µ—Ä–µ–π—Ç–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞\n–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–∂–º–∏—Ç–µ ‚ùì –≤ –∫–∞—Ç–∞–ª–æ–≥–µ',
      {
        reply_markup: {
          inline_keyboard: [[{ text: '–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥', web_app: { url } }]]
        }
      }
    );
  },

  // –æ–±—â–∏–π listener ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥ user‚Üíchat –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  onAnyMessage: async (msg) => {
    try { await chatStore.set(msg.from.id, msg.chat.id); } catch (_) {}
  },

  // /id
  onIdCommand: (msg) => {
    bot.sendMessage(msg.chat.id, `–í–∞—à chat_id: ${msg.chat.id}`);
  },

  // webhook
  onWebhook: (req, res) => {
    try { bot.processUpdate(req.body); res.sendStatus(200); }
    catch (e) { console.error('onWebhook error:', e); res.sendStatus(500); }
  },

  // (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ø–æ—Ç–æ–∫ /data
  onWebAppData: async (req, res) => {
    try {
      const { user, platform, form, pricing, email, subscribe } = req.body || {};
      if (!user?.id) return res.status(400).json({ ok: false, error: 'no user.id' });

      const plan     = form?.plan ?? '-';
      const accounts = form?.accounts ?? '-';
      const duration = form?.duration ?? '-';
      const emailStr = email || form?.email || '-';
      const subs     = !!subscribe;

      const base = [
        `‚Ä¢ *–¢–∞—Ä–∏—Ñ:* ${escMd(plan)}`,
        ...(SPECIAL_PLANS.has(plan) ? [] : [`‚Ä¢ *–ê–∫–∫–∞—É–Ω—Ç–æ–≤:* ${escMd(accounts)}`]),
        `‚Ä¢ *–°—Ä–æ–∫:* ${escMd(duration)} –º–µ—Å.`,
        `‚Ä¢ *Email:* ${escMd(emailStr)}`,
        `‚Ä¢ *–ü–æ–¥–ø–∏—Å–∫–∞:* ${subs ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–Ω–µ—Ç'}`,
        `‚Ä¢ *–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:* ${escMd(platform || 'N/A')}`,
        `‚Ä¢ *User ID:* ${escMd(user.id)}`
      ];
      const price = buildPriceLines(pricing);

      // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await bot.sendMessage(
        user.id,
        ['‚úÖ *–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞*', ...base, ...price].join('\n'),
        { parse_mode: 'Markdown' }
      );

      // –∞–¥–º–∏–Ω–∞–º –≤ Telegram
      await notifyAdmins(bot, [
        ...base,
        ...price,
        `‚Ä¢ *Chat ID:* ${await chatStore.get(user.id) || '‚Äî'}`
      ]);

      // –ø–∏—Å—å–º–∞ –∞–¥–º–∏–Ω—É –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await emailAdminsAndUser({
        plan,
        accounts,
        duration,
        email: emailStr,
        subscribe: subs,
        pricing,
        userId: user.id,
        chatId: await chatStore.get(user.id)
      });

      res.json({ ok: true });
    } catch (e) {
      console.error('onWebAppData error:', e);
      res.status(500).json({ ok: false });
    }
  },

  // –í–∞—Ä–∏–∞–Ω—Ç B: inline-–∫–Ω–æ–ø–∫–∞ ‚Üí —Ñ—Ä–æ–Ω—Ç —à–ª—ë—Ç { query_id, from_id, data } ‚Üí answerWebAppQuery + –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  onWebAppAnswer: async (req, res) => {
    try {
      const { query_id, from_id, data } = req.body || {};
      if (!query_id) return res.status(400).json({ ok: false, error: 'no query_id' });

      const plan      = data?.plan ?? '-';
      const accounts  = data?.accounts ?? '-';
      const duration  = data?.duration ?? '-';
      const pricing   = data?.pricing; // { total, ... }
      const email     = data?.email ?? '-';
      const subscribe = !!data?.subscribe;

      const baseLines = [
        '‚úÖ *–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*',
        `‚Ä¢ *–¢–∞—Ä–∏—Ñ:* ${escMd(plan)}`,
        ...(SPECIAL_PLANS.has(plan) ? [] : [`‚Ä¢ *–ê–∫–∫–∞—É–Ω—Ç–æ–≤:* ${escMd(accounts)}`]),
        `‚Ä¢ *–°—Ä–æ–∫:* ${escMd(duration)} –º–µ—Å.`,
        `‚Ä¢ *Email:* ${escMd(email)}`,
        `‚Ä¢ *–ü–æ–¥–ø–∏—Å–∫–∞:* ${subscribe ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–Ω–µ—Ç'}`
      ];
      const priceLines = buildPriceLines(pricing); // –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —ç–∫–æ–Ω–æ–º–∏–∏
      const text = [...baseLines, ...priceLines].join('\n');

      // 1) –û—Ç–≤–µ—Ç –Ω–∞ inline-–∑–∞–ø—Ä–æ—Å (—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—è–≤–∏—Ç—Å—è –≤ —á–∞—Ç–µ)
      await bot.answerWebAppQuery(query_id, {
        type: 'article',
        id: String(Date.now()),
        title: '–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞',
        input_message_content: { message_text: text, parse_mode: 'Markdown' }
      });

      // 2) –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ ‚Äî –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ (–µ—Å–ª–∏ –∑–Ω–∞–µ–º chat_id)
      let chatId = null;
      if (from_id) {
        try {
          chatId = await chatStore.get(from_id);
          if (chatId) {
            await bot.sendMessage(chatId, text, { parse_mode: 'Markdown' });
          }
        } catch (e) {
          console.warn('sendMessage fallback failed:', e);
        }
      }

      // 3) –û—Ç–ø—Ä–∞–≤–∏—Ç—å summary –∞–¥–º–∏–Ω–∞–º (Telegram)
      await notifyAdmins(bot, [
        ...baseLines,
        ...priceLines,
        `‚Ä¢ *User ID:* ${from_id || '‚Äî'}`,
        `‚Ä¢ *Chat ID:* ${chatId || (from_id && await chatStore.get(from_id)) || '‚Äî'}`
      ]);

      // 4) E-mail –∞–¥–º–∏–Ω—É –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await emailAdminsAndUser({
        plan,
        accounts: SPECIAL_PLANS.has(plan) ? '-' : accounts,
        duration,
        email,
        subscribe,
        pricing,
        userId: from_id,
        chatId
      });

      res.json({ ok: true });
    } catch (e) {
      console.error('answerWebAppQuery error:', e);
      res.status(500).json({ ok: false });
    }
  },

});
