// controllers/telegramController.js
function escMd(s = '') {
  return String(s).replace(/([_*[\]()~`>#+\-=|{}.!])/g, '\\$1');
}

module.exports = (bot) => ({
  onStartCommand: (msg) => {
    bot.sendMessage(msg.chat.id, '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ö–∞—Ç–∞–ª–æ–≥', {
      reply_markup: {
        inline_keyboard: [[{
          text: '–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥',
          web_app: { url: process.env.SERVER_URL }
        }]]
      }
    });
  },

  onWebhook: (req, res) => {
    bot.processUpdate(req.body);
    res.sendStatus(200);
  },

  // –û—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Ç—å POST /data –Ω–∞ —Å–ª—É—á–∞–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è fetch/beacon c —Ñ—Ä–æ–Ω—Ç–∞
  onWebAppData: async (req, res) => {
    try {
      const { user, initData, platform, form } = req.body || {};
      if (!user?.id) return res.status(400).json({ ok: false, error: 'no user.id' });

      const lines = [
        'üîî *WebApp (/data):*',
        `‚Ä¢ *Name:* ${escMd([user.first_name, user.last_name].filter(Boolean).join(' ') || 'N/A')}`,
        `‚Ä¢ *Username:* ${escMd(user.username ? '@' + user.username : 'N/A')}`,
        `‚Ä¢ *Platform:* ${escMd(platform || 'N/A')}`,
      ];
      if (form && typeof form === 'object') {
        lines.push('‚Ä¢ *Form:*', '`' + escMd(JSON.stringify(form)) + '`');
      } else {
        lines.push(`‚Ä¢ *initData:* \`${String(initData || '').slice(0, 1500)}\``);
      }

      await bot.sendMessage(user.id, lines.join('\n'), { parse_mode: 'Markdown' });
      res.json({ ok: true });
    } catch (e) {
      console.error('onWebAppData error:', e);
      res.status(500).json({ ok: false });
    }
  },

  // –ù–û–í–û–ï: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è tg.sendData(...) –∏–∑ wizard.js
  onWebAppMessage: async (msg) => {
    try {
      const payload = msg.web_app_data?.data;
      if (!payload) return; // –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

      const chatId = msg.chat.id;
      let data = {};
      try { data = JSON.parse(payload); } catch { data = { raw: String(payload) }; }

      const plan     = data.plan ?? '-';
      const accounts = data.accounts ?? '-';
      const duration = data.duration ?? '-';

      const text = [
        '‚úÖ *–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞*',
        `‚Ä¢ *–¢–∞—Ä–∏—Ñ:* ${escMd(plan)}`,
        `‚Ä¢ *–ê–∫–∫–∞—É–Ω—Ç–æ–≤:* ${escMd(accounts)}`,
        `‚Ä¢ *–°—Ä–æ–∫:* ${escMd(duration)} –º–µ—Å.`,
      ].join('\n');

      await bot.sendMessage(chatId, text, { parse_mode: 'Markdown' });
    } catch (e) {
      console.error('onWebAppMessage error:', e);
    }
  }
});
