// controllers/telegramController.js
const chatStore = require('../chatStore');

function escMd(s = '') {
  return String(s).replace(/([_*[\]()~`>#+\-=|{}.!])/g, '\\$1');
}

module.exports = (bot) => ({

  // /start ‚Äî inline-–∫–Ω–æ–ø–∫–∞ —Å web_app (–≤–∞—Ä–∏–∞–Ω—Ç B)
  onStartCommand: async (msg) => {
    const url = process.env.SERVER_URL;
    // —Å–æ—Ö—Ä–∞–Ω—è–µ–º user_id ‚Üí chat_id (–ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)
    try { await chatStore.set(msg.from.id, msg.chat.id); } catch (e) { console.warn('chatStore.set on /start failed:', e); }

    bot.sendMessage(
      msg.chat.id,
      '–û—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ, –ø—Ä–æ–π–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ:',
      {
        reply_markup: {
          inline_keyboard: [[{
            text: '–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥',
            web_app: { url }
          }]]
        }
      }
    );
  },

  // –æ–±—â–∏–π listener ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥ user‚Üíchat –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  onAnyMessage: async (msg) => {
    try { await chatStore.set(msg.from.id, msg.chat.id); } catch (e) { /* no-op */ }
  },

  // /id ‚Äî –±—ã—Å—Ç—Ä—ã–π chat_id
  onIdCommand: (msg) => {
    bot.sendMessage(msg.chat.id, `–í–∞—à chat_id: ${msg.chat.id}`);
  },

  // –≤–µ–±—Ö—É–∫ –Ω–æ–¥—ã
  onWebhook: (req, res) => {
    try {
      bot.processUpdate(req.body);
      res.sendStatus(200);
    } catch (e) {
      console.error('onWebhook error:', e);
      res.sendStatus(500);
    }
  },

  // —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –≤–∞—Ä–∏–∞–Ω—Ç–æ–º fetch/beacon
  onWebAppData: async (req, res) => {
    try {
      const { user, initData, platform, form } = req.body || {};
      if (!user?.id) return res.status(400).json({ ok: false, error: 'no user.id' });

      const lines = [
        'üîî *WebApp (/data):*',
        `‚Ä¢ *Name:* ${escMd([user.first_name, user.last_name].filter(Boolean).join(' ') || 'N/A')}`,
        `‚Ä¢ *Username:* ${escMd(user.username ? '@' + user.username : 'N/A')}`,
        `‚Ä¢ *Platform:* ${escMd(platform || 'N/A')}`,
      ];
      if (form && typeof form === 'object') {
        lines.push('‚Ä¢ *Form:*', '`' + escMd(JSON.stringify(form)) + '`');
      } else {
        lines.push(`‚Ä¢ *initData:* \`${escMd(String(initData || '').slice(0, 1500))}\``);
      }

      await bot.sendMessage(user.id, lines.join('\n'), { parse_mode: 'Markdown' });
      res.json({ ok: true });
    } catch (e) {
      console.error('onWebAppData error:', e);
      res.status(500).json({ ok: false });
    }
  },

  // –í–ê–†–ò–ê–ù–¢ B: inline-–∫–Ω–æ–ø–∫–∞ ‚Üí —Ñ—Ä–æ–Ω—Ç —à–ª—ë—Ç query_id(+ from_id) ‚Üí –æ—Ç–≤–µ—á–∞–µ–º –≤ —á–∞—Ç —á–µ—Ä–µ–∑ answerWebAppQuery
  onWebAppAnswer: async (req, res) => {
    try {
      const { query_id, from_id, data } = req.body || {};
      if (!query_id) return res.status(400).json({ ok: false, error: 'no query_id' });

      const plan     = data?.plan ?? '-';
      const accounts = data?.accounts ?? '-';
      const duration = data?.duration ?? '-';

      const text = [
        '‚úÖ *–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞*',
        `‚Ä¢ *–¢–∞—Ä–∏—Ñ:* ${escMd(plan)}`,
        `‚Ä¢ *–ê–∫–∫–∞—É–Ω—Ç–æ–≤:* ${escMd(accounts)}`,
        `‚Ä¢ *–°—Ä–æ–∫:* ${escMd(duration)} –º–µ—Å.`,
      ].join('\n');

      // 1) –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ inline-–∑–∞–ø—Ä–æ—Å
      // await bot.answerWebAppQuery(query_id, {
      //   type: 'article',
      //   id: String(Date.now()),
      //   title: '–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞',
      //   input_message_content: { message_text: text, parse_mode: 'Markdown' }
      // });

      // 2) –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç (–µ—Å–ª–∏ –∑–Ω–∞–µ–º chat_id)
      if (from_id) {
        try {
          const chatId = await chatStore.get(from_id);
          if (chatId) {
            await bot.sendMessage(chatId, text, { parse_mode: 'Markdown' });
          } else {
            console.warn('No chatId found for from_id:', from_id);
          }
        } catch (e) {
          console.warn('sendMessage fallback failed:', e);
        }
      }

      res.json({ ok: true });
    } catch (e) {
      console.error('answerWebAppQuery error:', e);
      res.status(500).json({ ok: false });
    }
  },

});
