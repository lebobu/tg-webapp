// controllers/telegramController.js
const chatStore = require('../chatStore');        // –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ ‚Äî —É–¥–∞–ª–∏—Ç–µ –∏ –≤—ã–∑–æ–≤—ã chatStore.*
const { sendMail } = require('../mailer');        // nodemailer-–æ–±—ë—Ä—Ç–∫–∞ (—Å–º. mailer.js)
const { buildOrderEmail } = require('../emailTemplates'); // –ù–û–í–û–ï: ¬´–∫—Ä–∞—Å–∏–≤—ã–µ¬ª HTML-–ø–∏—Å—å–º–∞

/* ===================== ENV / CONFIG ===================== */

// Telegram-–∞–¥–º–∏–Ω—ã (ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
const ADMIN_IDS = (process.env.ADMIN_CHAT_IDS || process.env.ADMIN_CHAT_ID || '')
  .split(/[,\s]+/)
  .map(x => x.trim())
  .filter(Boolean);

// –ê–¥–º–∏–Ω—Å–∫–∏–π e-mail –¥–ª—è –ø–∏—Å–µ–º
const ADMIN_EMAIL = (process.env.ADMIN_EMAIL || '').trim();

// –ë—Ä–µ–Ω–¥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è HTML-–ø–∏—Å–µ–º
const BRAND = {
  name:         process.env.BRAND_NAME     || 'Catalog Bot',
  logo:         process.env.BRAND_LOGO_URL || '',       // URL –ª–æ–≥–æ—Ç–∏–ø–∞ (PNG/SVG)
  primary:      process.env.BRAND_PRIMARY  || '#0a84ff',
  supportEmail: process.env.SUPPORT_EMAIL  || ''
};

/* ===================== HELPERS ===================== */

function escMd(s = '') {
  // –≤–∞–∂–Ω–æ: –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ—á–∫—É (.) ‚Äî –∏–Ω–∞—á–µ –≤ e-mail –±—É–¥–µ—Ç \.
  return String(s).replace(/([_*[\]()~`>#+\-=|{}])/g, '\\$1');
}
function isValidEmail(s) {
  return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(String(s || '').trim());
}

// –ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –±–µ–∑ "–≠–∫–æ–Ω–æ–º–∏–∏" ‚Äî —Ç–æ–ª—å–∫–æ –∏—Ç–æ–≥
function buildPriceLines(pricing) {
  if (!pricing) return [];
  return [`‚Ä¢ *–ò—Ç–æ–≥–æ:* ${escMd(pricing.total)} —Ä—É–±.`];
}

async function notifyAdmins(bot, lines) {
  if (!ADMIN_IDS.length) return;
  const text = ['üõé *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞*', ...lines].join('\n');
  for (const adminId of ADMIN_IDS) {
    try {
      await bot.sendMessage(adminId, text, { parse_mode: 'Markdown' });
    } catch (e) {
      console.warn('notifyAdmins failed for', adminId, e.message);
    }
  }
}

const SPECIAL_PLANS = new Set(['–†–æ—É—Ç–µ—Ä','–°–µ—Ä–≤–µ—Ä VPS']);

/* ===================== EMAIL SENDER (HTML CARD) ===================== */

async function emailAdminsAndUser({ order }) {
  try {
    // —à–∞–±–ª–æ–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const adminTpl = buildOrderEmail({ brand: BRAND, order }).admin;
    const userTpl  = buildOrderEmail({ brand: BRAND, order }).user;

    // –∞–¥–º–∏–Ω—É
    if (ADMIN_EMAIL) {
      await sendMail({ to: ADMIN_EMAIL, subject: adminTpl.subject, text: adminTpl.text, html: adminTpl.html });
    }
    // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (order.email && isValidEmail(order.email)) {
      await sendMail({ to: order.email, subject: userTpl.subject, text: userTpl.text, html: userTpl.html });
    }
  } catch (e) {
    console.warn('emailAdminsAndUser failed:', e.message);
  }
}

/* ===================== CONTROLLER ===================== */

module.exports = (bot) => ({

  // /start ‚Äî inline-–∫–Ω–æ–ø–∫–∞ —Å web_app (–≤–∞—Ä–∏–∞–Ω—Ç B)
  onStartCommand: async (msg) => {
    const url = process.env.SERVER_URL;
    try { await chatStore.set(msg.from.id, msg.chat.id); } catch (_) {}
    bot.sendMessage(
      msg.chat.id,
      '–ü–µ—Ä–µ–π—Ç–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞\n–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–∂–º–∏—Ç–µ ‚ùì –≤ –∫–∞—Ç–∞–ª–æ–≥–µ',
      {
        reply_markup: {
          inline_keyboard: [[{ text: '–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥', web_app: { url } }]]
        }
      }
    );
  },

  // –æ–±—â–∏–π listener ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥ user‚Üíchat –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  onAnyMessage: async (msg) => {
    try { await chatStore.set(msg.from.id, msg.chat.id); } catch (_) {}
  },

  // /id
  onIdCommand: (msg) => {
    bot.sendMessage(msg.chat.id, `–í–∞—à chat_id: ${msg.chat.id}`);
  },

  // webhook
  onWebhook: (req, res) => {
    try { bot.processUpdate(req.body); res.sendStatus(200); }
    catch (e) { console.error('onWebhook error:', e); res.sendStatus(500); }
  },

  // (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ø–æ—Ç–æ–∫ /data
  onWebAppData: async (req, res) => {
    try {
      const { user, platform, form, pricing, email, subscribe } = req.body || {};
      if (!user?.id) return res.status(400).json({ ok: false, error: 'no user.id' });

      const plan     = form?.plan ?? '-';
      const accounts = form?.accounts ?? '-';
      const duration = form?.duration ?? '-';
      const emailStr = (email || form?.email || '').trim();
      const subs     = !!subscribe;

      const base = [
        `‚Ä¢ *–¢–∞—Ä–∏—Ñ:* ${escMd(plan)}`,
        ...(SPECIAL_PLANS.has(plan) ? [] : [`‚Ä¢ *–ê–∫–∫–∞—É–Ω—Ç–æ–≤:* ${escMd(accounts)}`]),
        `‚Ä¢ *–°—Ä–æ–∫:* ${escMd(duration)} –º–µ—Å.`,
        `‚Ä¢ *Email:* ${escMd(emailStr || '-')}`,
        `‚Ä¢ *–ü–æ–¥–ø–∏—Å–∫–∞:* ${subs ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–Ω–µ—Ç'}`,
        `‚Ä¢ *–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:* ${escMd(platform || 'N/A')}`,
        `‚Ä¢ *User ID:* ${escMd(user.id)}`
      ];
      const price = buildPriceLines(pricing);

      // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await bot.sendMessage(
        user.id,
        ['‚úÖ *–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞*', ...base, ...price].join('\n'),
        { parse_mode: 'Markdown' }
      );

      // –∞–¥–º–∏–Ω–∞–º –≤ Telegram
      await notifyAdmins(bot, [
        ...base,
        ...price,
        `‚Ä¢ *Chat ID:* ${await chatStore.get(user.id) || '‚Äî'}`
      ]);

      // –ø–∏—Å—å–º–∞ –∞–¥–º–∏–Ω—É –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚Äî –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–´–ô –®–ê–ë–õ–û–ù
      await emailAdminsAndUser({
        order: {
          plan,
          accounts: SPECIAL_PLANS.has(plan) ? '-' : accounts,
          duration,
          email: emailStr,
          subscribe: subs,
          pricing,
          userId: user.id,
          chatId: await chatStore.get(user.id)
        }
      });

      res.json({ ok: true });
    } catch (e) {
      console.error('onWebAppData error:', e);
      res.status(500).json({ ok: false });
    }
  },

  // –í–∞—Ä–∏–∞–Ω—Ç B: inline-–∫–Ω–æ–ø–∫–∞ ‚Üí —Ñ—Ä–æ–Ω—Ç —à–ª—ë—Ç { query_id, from_id, data }
  onWebAppAnswer: async (req, res) => {
    try {
      const { query_id, from_id, data } = req.body || {};
      if (!query_id) return res.status(400).json({ ok: false, error: 'no query_id' });

      const plan      = data?.plan ?? '-';
      const accounts  = data?.accounts ?? '-';
      const duration  = data?.duration ?? '-';
      const pricing   = data?.pricing; // { total, ... }
      const email     = (data?.email || '').trim();
      const subscribe = !!data?.subscribe;

      const baseLines = [
        '‚úÖ *–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*',
        `‚Ä¢ *–¢–∞—Ä–∏—Ñ:* ${escMd(plan)}`,
        ...(SPECIAL_PLANS.has(plan) ? [] : [`‚Ä¢ *–ê–∫–∫–∞—É–Ω—Ç–æ–≤:* ${escMd(accounts)}`]),
        `‚Ä¢ *–°—Ä–æ–∫:* ${escMd(duration)} –º–µ—Å.`,
        `‚Ä¢ *Email:* ${escMd(email || '-')}`,
        `‚Ä¢ *–ü–æ–¥–ø–∏—Å–∫–∞:* ${subscribe ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–Ω–µ—Ç'}`
      ];
      const priceLines = buildPriceLines(pricing);
      const text = [...baseLines, ...priceLines].join('\n');

      // 1) –û—Ç–≤–µ—Ç –Ω–∞ inline-–∑–∞–ø—Ä–æ—Å (—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—è–≤–∏—Ç—Å—è –≤ —á–∞—Ç–µ)
      await bot.answerWebAppQuery(query_id, {
        type: 'article',
        id: String(Date.now()),
        title: '–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞',
        input_message_content: { message_text: text, parse_mode: 'Markdown' }
      });

      // 2) –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ ‚Äî –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ (–µ—Å–ª–∏ –∑–Ω–∞–µ–º chat_id)
      let chatId = null;
      if (from_id) {
        try {
          chatId = await chatStore.get(from_id);
          if (chatId) {
            await bot.sendMessage(chatId, text, { parse_mode: 'Markdown' });
          }
        } catch (e) {
          console.warn('sendMessage fallback failed:', e);
        }
      }

      // 3) –û—Ç–ø—Ä–∞–≤–∏—Ç—å summary –∞–¥–º–∏–Ω–∞–º (Telegram)
      await notifyAdmins(bot, [
        ...baseLines,
        ...priceLines,
        `‚Ä¢ *User ID:* ${from_id || '‚Äî'}`,
        `‚Ä¢ *Chat ID:* ${chatId || (from_id && await chatStore.get(from_id)) || '‚Äî'}`
      ]);

      // 4) E-mail –∞–¥–º–∏–Ω—É –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚Äî –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–´–ô –®–ê–ë–õ–û–ù
      await emailAdminsAndUser({
        order: {
          plan,
          accounts: SPECIAL_PLANS.has(plan) ? '-' : accounts,
          duration,
          email,
          subscribe,
          pricing,
          userId: from_id,
          chatId
        }
      });

      res.json({ ok: true });
    } catch (e) {
      console.error('answerWebAppQuery error:', e);
      res.status(500).json({ ok: false });
    }
  },

});
