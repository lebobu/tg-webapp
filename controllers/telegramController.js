// controllers/telegramController.js
const chatStore = require('../chatStore'); // –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ ‚Äî —É–¥–∞–ª–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –∏ –≤—ã–∑–æ–≤—ã chatStore.*

function escMd(s = '') {
  return String(s).replace(/([_*[\]()~`>#+\-=|{}.!])/g, '\\$1');
}

// –ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –±–µ–∑ "–≠–∫–æ–Ω–æ–º–∏—è"
function buildPriceLines(pricing) {
  if (!pricing) return [];
  const lines = [
    `‚Ä¢ *–ò—Ç–æ–≥–æ:* ${escMd(pricing.total)}`,
    // `‚Ä¢ *–ï–∂–µ–º–µ—Å—è—á–Ω–æ:* ${escMd(pricing.monthlyAfter)}`
  ];
/*   const extras = [];
  if (pricing.baseMonthly !== undefined) extras.push(`–±–∞–∑–∞ ${pricing.baseMonthly}`);
  if (pricing.discount !== undefined)     extras.push(`—Å–∫–∏–¥–∫–∞ ${pricing.discount}`);
  if (extras.length) lines[1] += ` _(${escMd(extras.join(', '))})_`;
 */  return lines;
}

module.exports = (bot) => ({

  // /start ‚Äî inline-–∫–Ω–æ–ø–∫–∞ —Å web_app (–≤–∞—Ä–∏–∞–Ω—Ç B)
  onStartCommand: async (msg) => {
    const url = process.env.SERVER_URL;
    try { await chatStore.set(msg.from.id, msg.chat.id); } catch (_) {}
    bot.sendMessage(
      msg.chat.id,
      '–ü–µ—Ä–µ–π—Ç–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞\n –ù–∞–∂–º–∏—Ç–µ ‚ùì –≤ –∫–∞—Ç–∞–ª–æ–≥–µ, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –≤–æ–ø—Ä–æ—Å—ã',
      {
        reply_markup: {
          inline_keyboard: [[{ text: '–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥', web_app: { url } }]]
        }
      }
    );
  },

  // –æ–±—â–∏–π listener ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥ user‚Üíchat –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  onAnyMessage: async (msg) => {
    try { await chatStore.set(msg.from.id, msg.chat.id); } catch (_) {}
  },

  // /id
  onIdCommand: (msg) => {
    bot.sendMessage(msg.chat.id, `–í–∞—à chat_id: ${msg.chat.id}`);
  },

  // webhook
  onWebhook: (req, res) => {
    try { bot.processUpdate(req.body); res.sendStatus(200); }
    catch (e) { console.error('onWebhook error:', e); res.sendStatus(500); }
  },

  // (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ø–æ—Ç–æ–∫ /data
  onWebAppData: async (req, res) => {
    try {
      const { user, initData, platform, form, pricing } = req.body || {};
      if (!user?.id) return res.status(400).json({ ok: false, error: 'no user.id' });

      const lines = [
        'üîî *WebApp (/data):*',
        `‚Ä¢ *Name:* ${escMd([user.first_name, user.last_name].filter(Boolean).join(' ') || 'N/A')}`,
        `‚Ä¢ *Username:* ${escMd(user.username ? '@' + user.username : 'N/A')}`,
        `‚Ä¢ *Platform:* ${escMd(platform || 'N/A')}`,
      ];

      if (form && typeof form === 'object') {
        lines.push('‚Ä¢ *–í—ã–±–æ—Ä:*', '`' + escMd(JSON.stringify(form)) + '`');
      } else {
        lines.push(`‚Ä¢ *initData:* \`${escMd(String(initData || '').slice(0, 1500))}\``);
      }

      // üëâ –¥–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –ë–ï–ó —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –±–µ–∑ "–≠–∫–æ–Ω–æ–º–∏—è"
      lines.push(...buildPriceLines(pricing));

      await bot.sendMessage(user.id, lines.join('\n'), { parse_mode: 'Markdown' });
      res.json({ ok: true });
    } catch (e) {
      console.error('onWebAppData error:', e);
      res.status(500).json({ ok: false });
    }
  },

  // –í–∞—Ä–∏–∞–Ω—Ç B: inline-–∫–Ω–æ–ø–∫–∞ ‚Üí —Ñ—Ä–æ–Ω—Ç —à–ª—ë—Ç { query_id, from_id, data } ‚Üí answerWebAppQuery + –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  onWebAppAnswer: async (req, res) => {
    try {
      const { query_id, from_id, data } = req.body || {};
      if (!query_id) return res.status(400).json({ ok: false, error: 'no query_id' });

      const SPECIAL_PLANS = new Set(['–†–æ—É—Ç–µ—Ä','–°–µ—Ä–≤–µ—Ä VPS']);
      const plan     = data?.plan ?? '-';
      const accounts = data?.accounts ?? '-';
      const duration = data?.duration ?? '-';
      const pricing  = data?.pricing; // –æ–∂–∏–¥–∞–µ–º { total, monthlyAfter, baseMonthly, discount, ... }
      const email    = data?.email ?? '-';

      const baseLines = [
        '‚úÖ *–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞*',
        `‚Ä¢ *–¢–∞—Ä–∏—Ñ:* ${escMd(plan)}`,
         // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–ê–∫–∫–∞—É–Ω—Ç–æ–≤" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ù–ï —Å–ø–µ—Ü-–ø–ª–∞–Ω
        ...(SPECIAL_PLANS.has(plan) ? [] : [`‚Ä¢ *–ê–∫–∫–∞—É–Ω—Ç–æ–≤:* ${escMd(accounts)}`]),
        `‚Ä¢ *–°—Ä–æ–∫:* ${escMd(duration)} –º–µ—Å.`,
        `‚Ä¢ *Email:* ${escMd(email)}`
      ];
      const priceLines = buildPriceLines(pricing); // –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —ç–∫–æ–Ω–æ–º–∏–∏

      const text = [...baseLines, ...priceLines].join('\n');

      // 1) –û—Ç–≤–µ—Ç –Ω–∞ inline-–∑–∞–ø—Ä–æ—Å (—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—è–≤–∏—Ç—Å—è –≤ —á–∞—Ç–µ)
      await bot.answerWebAppQuery(query_id, {
        type: 'article',
        id: String(Date.now()),
        title: '–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞',
        input_message_content: { message_text: text, parse_mode: 'Markdown' }
      });

      // 2) –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ ‚Äî –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ (–µ—Å–ª–∏ –∑–Ω–∞–µ–º chat_id)
      if (from_id) {
        try {
          const chatId = await chatStore.get(from_id);
          if (chatId) {
            await bot.sendMessage(chatId, text, { parse_mode: 'Markdown' });
          }
        } catch (e) {
          console.warn('sendMessage fallback failed:', e);
        }
      }

      res.json({ ok: true });
    } catch (e) {
      console.error('answerWebAppQuery error:', e);
      res.status(500).json({ ok: false });
    }
  },

});

